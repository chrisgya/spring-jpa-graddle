plugins {
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.hidetake.swagger.generator" version "2.18.2"
//	id 'jacoco'
}

group = 'com.chrisgya'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


swaggerSources {
	def typeMappings = 'URI=URI, BigDecimal=BigDecimal, EntityModel=EntityModel'
	def importMappings = 'URI=java.net.URI, BigDecimal=java.math.BigDecimal, EntityModel=org.springframework.hateoas.EntityModel'
	eStore {
		def apiYaml = "${rootDir}/src/main/resources/api/openapi.yaml"
		def configJson = "${rootDir}/src/main/resources/api/config.json"
		inputFile = file(apiYaml)
		def ignoreFile = file("${rootDir}/src/main/resources/api/.openapi-generator-ignore")
		code {
			language = 'spring'
			configFile = file(configJson)
			rawOptions = ['--ignore-file-override', ignoreFile, '--type-mappings',
						  typeMappings, '--import-mappings', importMappings] as List<String>
			components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
			//templateDir = file("${rootDir}/src/main/resources/templates")
			//dependsOn validation // Should be uncommented once plugin starts supporting OA 3 validation
		}
	}
}

compileJava.dependsOn swaggerSources.eStore.code
sourceSets.main.java.srcDir "${swaggerSources.eStore.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.eStore.code.outputDir}/src/main/resources"

bootBuildImage {
	imageName = "172.18.96.1:5000/${project.name}:${project.version}"
	environment = ["BP_JVM_VERSION" : "17"]
}

//sourceSets {
//	integrationTest {
//		java {
//			compileClasspath += main.output + test.output
//			runtimeClasspath += main.output + test.output
//			srcDir file('src/integrationTest/java')
//		}
//		resources.srcDir file('src/integrationTest/resources')
//	}
//}

configurations {
//	integrationTestImplementation.extendsFrom testImplementation
//	integrationTestRuntime.extendsFrom testRuntime

	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.16.2")
}

dependencies {
	// OpenAPI Starts
	swaggerCodegen 'org.openapitools:openapi-generator-cli:4.3.1'
	compileOnly 'io.swagger:swagger-annotations:1.6.2'
	compileOnly 'org.openapitools:jackson-databind-nullable:0.2.1'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	compileOnly 'io.springfox:springfox-oas:3.0.0'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.1'
	// OpenAPI Ends

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'com.auth0:java-jwt:3.18.2'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

//task integrationTest(type: Test) {
//	useJUnitPlatform()
//	description = 'Runs the integration tests.'
//	group = 'verification'
//	testClassesDirs = sourceSets.integrationTest.output.classesDirs
//	classpath = sourceSets.integrationTest.runtimeClasspath
//}
//
//check.dependsOn integrationTest
//integrationTest.mustRunAfter test

test {
	useJUnitPlatform()
//	finalizedBy(jacocoTestReport)
}

//jacoco {
//	toolVersion = "0.8.7"
//	reportsDir = file("$buildDir/jacoco")
//}

//jacocoTestReport {
//	dependsOn test // tests are required to run before generating the report
//	afterEvaluate {
//		classDirectories.setFrom(files(classDirectories.files.collect {
//			fileTree(
//					dir: it,
//					exclude: [
//							'com.chrisgya.springjpagraddle/model/*',
//							'com.chrisgya.springjpagraddle/*Api.*',
//							'com.chrisgya.springjpagraddle/security/UNUSED/*',
//					])
//		}))
//	}
//}

//jacocoTestCoverageVerification {
//	violationRules {
//		rule {
//			limit {
//				minimum = 0.9
//			}
//		}
//	}
//}